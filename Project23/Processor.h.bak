#ifndef PROCESSOR
#define PROCESSOR
#include "process.h"
//#include "Queue.h"

#include<fstream>
#include <iostream>
//#include"Scheduler.h"
using namespace std;

class Scheduler;

class Processor
{
private:
    process* running;
	bool Busy;	//Busy or not?
	
	int BusyTime;		//Total time passed in BUSY state(PH2)
	int IdleTime;		//Total time passed in IDLE state(PH2)
	//int TotalTT;		//Total turnaround time for all processes(PH2)0
	

	int EndT;           //(PH2)
public:
	Scheduler* S;
	int RDYnum;
    int ExpToFinish;    //(PH2)
	bool Status();	//Return true if busy
	void SetStatus(bool s);	//Set state
	void PrintRUN();
	process* getRUN();	//get running process
	void SetRUN(process* p);	//Set process as the running process
	void RemRUN();	//Set running process as null

	virtual void InsertToRDY(process* p) = 0;
	virtual void ScheduleAlgo()=0;	//Scheduling algorithm that depends on type of processor
	virtual bool RDYEmpty() = 0;
	virtual void RDYToRUN()=0;
	virtual void IncRDY();
	virtual void decRDY();
	virtual double UtilCalc();      //Return processor utilization (BusyTime/(BusyTime+IdleTime))
	virtual double TotLoadCalc();    //Return processor load (BusyTime/TotalTT)
	virtual void PrintRDY() = 0;
	virtual void resetProcesses() = 0; //Reset process change states to true. Called ONLY at the very beginning of timestep.
	virtual void CalcExpectedTime() = 0;
	virtual int ExpectedTime() = 0;
	virtual process* ProcKILL(int id); //FCFS exclusive, find process by ID, kill it, and return the pointer. Used in SigKill and forking
	virtual process* runForkKILL(int id); //FCFS exclusive, same as above but in forking only
	virtual void SignalKillCheck(int ts);	//FCFS exclusive, sigkill
	Processor(Scheduler*s);
	Processor();
	~Processor();
	void IncIdle();
	void IncBusy();
	int	 GetIdle();
	int	 GetBusy();
};
#endif