#include "Processor_SJF.h";
#include"Scheduler.h"



//void Processor_SJF::Load(ifstream& Infile)
//{
	//Processor* p = new Processor_SJF;

//}
float Processor_SJF::TotLoadCalc()
{
	return GetBusy() / S->getTotalTD();
}

float Processor_SJF::UtilCalc()
{
	return GetBusy() / (GetBusy() + GetIdle());
}
void Processor_SJF::ScheduleAlgo()	//Incomplete function: Check above notes
{

	int ts = S->GetTS();
	if (Status())	//If processor is busy (is executing a task)
	{
		
		if (getRUN()->GetCT() > getRUN()->GetCRT()) 	//If the running task is not over yet
			if (getRUN()->GetNum_IO() > 0)
			{//If it's CRT equals IO_R
				if (getRUN()->GetIO()->io_time == getRUN()->GetCRT())
				{
					//CalcExpectedTime();
					IncIdle();
					SetStatus(false);
					getRUN()->SetState("BLK");
					S->IO_handling(this->getRUN());
					SetRUN(nullptr);
				}
				else
				{
					IncRUN(); //Increment its CRT
					IncBusy();
					RDYTask.sortByCT();
				}
			}
			else
			{
				IncRUN(); //Increment its CRT
				IncBusy();
				RDYTask.sortByCT();
			}



		else if (getRUN()->GetCT() == getRUN()->GetCRT())	//If it's CRT equals CT (supposed to be over)
		{
			getRUN()->SetTT(ts);						//Set termination time as current timestep
			IncIdle();
			SetStatus(false);							//CPU no longer busy
			getRUN()->SetState("TRM");					//Set state as TRM
			S->InsertTRM(getRUN());
			SetRUN(nullptr);
			//What I intend from here, is a check in the scheduler.
			//If processor is not busy but has a running process (which should be terminated anyway)
			//Then the scheduler will take it from the processor and deal with it afterwards depending on the set state
		}

	//	else if (getRUN()->GetIO()->io_time == getRUN()->GetCRT())	//If it's CRT equals IO_R
	//	{
	//		SetStatus(false);
	//		IncIdle();
	//		getRUN()->SetState("BLK");					//Set state as BLK
	//		S->IO_handling(this->getRUN());				//Dequeue a IO_R object (an io request has been carried out)
	//	}

	}
	else //processor not busy, no running tasks

	{

		if (RDYTask.getHead()) //if there's a task ready in the queue
		{
			RDYToRUN();
			IncIdle();
		}

	} 

}
void Processor_SJF::IncRUN()
{
	getRUN()->incCRT();	//Increment CRT
}
bool Processor_SJF::RDYEmpty()
{
	if (RDYTask.isEmpty())
		return true;
	else
		return false;

}
void Processor_SJF::RDYToRUN()
{
	if (RDYEmpty())
		return;
	if (!RDYTask.getHead()->getItem()->isChange())
		return;
	ExpToFinish -= RDYTask.getHead()->getItem()->GetCT() - RDYTask.getHead()->getItem()->GetCRT();
	SetRUN(RDYTask.dequeue());
	SetStatus(true);
	getRUN()->SetState("RUN");
	getRUN()->ToggleChange();
	RDYnum--;
}
void Processor_SJF::PrintRDY()
{
	RDYTask.print();
}
Processor_SJF::Processor_SJF(Scheduler* s) : Processor(s)
{
}



void Processor_SJF::InsertToRDY(process* p)
{ 
	if (!p) return;
	RDYnum++;
	RDYTask.enqueue(p);
	p->SetState("RDY");
	p->ToggleChange();
	ExpToFinish += p->GetCT() - p->GetCRT();
}

void Processor_SJF::resetProcesses()
{
	RDYTask.resetStatus();
}

void Processor_SJF::CalcExpectedTime()
{
	Node<process*>* ptr = new Node<process*>;
	ptr = RDYTask.getHead();
	ExpToFinish = 0;
	while (ptr)
	{
		int n;
		n = ptr->getItem()->GetNum_IO();
		if (n > 0)
		{
			IO_REQ* p = ptr->getItem()->GetIO();
			ExpToFinish += (p->io_time + ptr->getItem()->GetCT() - ptr->getItem()->GetCRT());
		}
		else
		{
			ExpToFinish += (ptr->getItem()->GetCT() - ptr->getItem()->GetCRT());
		}
		ptr = ptr->getNext();
	}
}

process* Processor_SJF::GetProcessFromRdy()
{
	if (RDYEmpty() || !RDYTask.getHead()->getItem()->isChange())
		return nullptr;
	RDYnum--;
	ExpToFinish -= RDYTask.getHead()->getItem()->GetCT() - RDYTask.getHead()->getItem()->GetCRT();
	return RDYTask.dequeue();
}

float Processor_SJF::ExpectedTime()
{
	return ExpToFinish;
}

//void Processor_SJF::Execute() {

	// Check if there are any processes in the queue and set as IDLE if empty
	//if (RDY_pro.isEmpty())
	//{
		//setState(IDLE);
		//return;
	//}
	//setState(BUSY); //Set as BUSY if execution starts

	// Get the first process in the queue
	//process** p = new process*;
	//ReadyTask.dequeue(p);

	// execute the process
	//p->Execute(); Will need to figure out timestep
	//EnqExec(*p); //Adds the executed task to the ExecutedTasks queue, if the memory needs to be freed afterwards, we can do it somehow through that queue.
	//delete p; //No longer needed, we took the pointer out of the ReadyQueue and safely enqueued it in ExecutedQueue.
//}